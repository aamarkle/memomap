	// Method that listens for a mainMenu button click
	public void mainMenuClick(View view) {

		// Make the fragment transaction
		FragmentTransaction ft = fragmentManager.beginTransaction();
		ft.replace(R.id.fragment_container, mmF);
		ft.addToBackStack("main");
		ft.commit();
	}

	private static void drawMarker(GoogleMap map, LatLng curr){
		map.addMarker(new MarkerOptions()
						.position(curr)
						.title(editTitle)
						.snippet(editBody));
		//map.addCircle(new CircleOptions().center(curr).radius(50).strokeWidth(2).fillColor(R.color.Blue));
		
	}
	
	private boolean isMapReachable(){
		int statusCode = GooglePlayServicesUtil
				.isGooglePlayServicesAvailable(getApplicationContext());
		if (statusCode == ConnectionResult.SUCCESS) {
		    return true;
		}
		else return false;
	}

	private void zoomToLoc(){
		location = mapFragment.getMyLocation();
		if (location != null) {
			curr = new LatLng(location.getLatitude(), location.getLongitude());
			mapFragment.animateCamera(CameraUpdateFactory.newLatLngZoom(curr, 12));
		}
	}

	//static AddressFragment aF = new AddressFragment();
	//static EditMemoFragment emf 	= new EditMemoFragment();
	//static ViewMemosFragment vmF 	= new ViewMemosFragment();


	public void deleteMemoClick(View view) {
	Toast.makeText(this, "Functionality unimplemented.", Toast.LENGTH_SHORT).show();
	}

	// method that listens for a continue button click
	public void continueClick(View view) throws IOException {

		// Get access to the edit Text fields
		EditText editAddressTxt = (EditText) findViewById(R.id.editAddress);

		// GeoCoder
		List<Address> found = null;
		found = new Geocoder(this).getFromLocationName(editAddressTxt.getText()
				.toString(), 1);
		lat = found.get(0).getLatitude();
		lon = found.get(0).getLongitude();
		LatLng l = new LatLng(lat, lon);

		// make a marker on the mapFragment and animate the camera
		mapFragment.addMarker(new MarkerOptions().position(l));
		CameraPosition cp = new CameraPosition.Builder().target(l).zoom(14)
				.build();
		mapFragment.animateCamera(CameraUpdateFactory.newCameraPosition(cp), 5000, null);

		// mapFragment.moveCamera(CameraUpdateFactory.newLatLng(l));
		// mapFragment.animateCamera(CameraUpdateFactory.zoomTo(13), 2000, null);

		// Set the edit text fields blank for the next use
		editAddressTxt.setText("");
	}
	
	// Fragment for the address fragment
	public static class AddressFragment extends Fragment {
		public AddressFragment() { }

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container,
				Bundle savedInstanceState) {
			return inflater.inflate(R.layout.fragment_address, container, false);
		}
	}
	


		// Method that listens for a editMemo button click
	public void editMemoClick(View view) {
		// Edit the memo
		String[] title = { editTitle };
		EditText bodyView = (EditText) findViewById(R.id.et_EditBody);
		String bodyText = bodyView.getText().toString();
		//dbHelper.editMemo(database, title, bodyText);
		//dbHelper.updateMemo(new Memo());

		zoomToLoc();
		
		// Make the fragment transaction
		FragmentTransaction ft = fragmentManager.beginTransaction();
		ft.replace(R.id.fragment_container, mmF);
		ft.addToBackStack("main");
		ft.commit();
	}

	// Fragment for the view memo fragment
	public static class ViewMemosFragment extends Fragment {
		public ViewMemosFragment() { }

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container,
				Bundle savedInstanceState) {
			Log.d("ViewMemosFragment", "onCreateView");
			return inflater.inflate(R.layout.fragment_view_memos, container, false);
		}

		@Override
		public void onStart() {
			super.onStart();
			Log.d("ViewMemosFragment","onStart");

			// Set up the ListView
			String
				title = DatabaseHandler.KEY_MTITLE,
				subtitle = DatabaseHandler.KEY_MBODY;
			String[] columns = { title, subtitle };

			int[] toViews = {
				R.id.tv_MemoListTitle, 
				R.id.tv_MemoListBody 
			};

			Cursor cursor = dbHelper.queryMemo(database, null);

			SimpleCursorAdapter adapter = new SimpleCursorAdapter(
					getActivity(), R.layout.memo_list, cursor, columns, toViews, 0);
			ListView listView = (ListView) getActivity().findViewById(R.id.memoList);
			listView.setAdapter(adapter);
			
			listView.setOnItemClickListener(new OnItemClickListener() {

				@Override
				public void onItemClick(AdapterView<?> a, View v, int position, long id) {
					Log.d("ViewMemosFragment","onItemClick");
					String[] search = { ((TextView) a
							.findViewById(R.id.tv_MemoListTitle)).getText().toString() };
					// Get the correct
					Cursor c = dbHelper.queryMemo(database, search);
					
					c.moveToFirst();
					double 
						latitude = c.getDouble(c.getColumnIndex(DatabaseHandler.KEY_MLAT)),
						longitude = c.getDouble(c.getColumnIndex(DatabaseHandler.KEY_MLONG)),
						radius = c.getDouble(c.getColumnIndex(DatabaseHandler.KEY_MRAD));

					editTitle = c.getString(c.getColumnIndex(DatabaseHandler.KEY_MTITLE));
					editBody = c.getString(c.getColumnIndex(DatabaseHandler.KEY_MBODY));
					editLat = Double.toString(latitude);
					editLon = Double.toString(longitude);
					editRad = Double.toString(radius);
					
					// Make the fragment transaction
					FragmentTransaction ft = MainActivityFragments.fragmentManager.beginTransaction();
					EditMemoFragment editFrag = new EditMemoFragment();
					ft.replace(R.id.fragment_container, editFrag);
					ft.addToBackStack("editMemo");
					ft.commit();
					ListView listView = (ListView) getActivity().findViewById(R.id.memoList);
					listView.setClickable(false);

				}
			});

		}

		// onResume method for the view memo fragment
		@Override
		public void onResume() {
			super.onResume();

			// MainActivityFragments.FragmentTransaction fragmentTransation =
			// fragmentManager.beginTransaction();
			// ft.replace(R.id.listView1, new MemoListActivity());

			// Set up the ListView

			String
				title = DatabaseHandler.KEY_MTITLE,
				subtitle = DatabaseHandler.KEY_MBODY;
			String[] columns = { title, subtitle };

			int[] toViews = { R.id.tv_MemoListTitle, R.id.tv_MemoListBody };

			Cursor cursor = dbHelper.queryMemo(database, null);

			SimpleCursorAdapter adapter = new SimpleCursorAdapter(
					getActivity(), R.layout.memo_list, cursor, columns,
					toViews, 0);
			ListView listView = (ListView) getActivity().findViewById(
					R.id.memoList);
			listView.setAdapter(adapter);
			listView.setOnItemClickListener(new OnItemClickListener() {

				@Override
				public void onItemClick(AdapterView<?> a, View v, int position, long id) {
					String[] search = { 
							((TextView) v.findViewById(R.id.tv_MemoListTitle)).getText().toString() 
					};
					
					Cursor c = dbHelper.queryMemo(database, search);
					c.moveToFirst();
					
					editTitle = c.getString(c.getColumnIndex(DatabaseHandler.KEY_MTITLE));
					editBody = c.getString(c.getColumnIndex(DatabaseHandler.KEY_MBODY));
					editLat = Double.toString(c.getDouble(c.getColumnIndex(DatabaseHandler.KEY_MLAT)));
					editLon = Double.toString(c.getDouble(c.getColumnIndex(DatabaseHandler.KEY_MLONG)));
					editRad = Double.toString(c.getDouble(c.getColumnIndex(DatabaseHandler.KEY_MRAD)));

					// Make the fragment transaction
					FragmentTransaction ft = MainActivityFragments.fragmentManager
							.beginTransaction();
					EditMemoFragment editFrag = new EditMemoFragment();
					ft.replace(R.id.fragment_container, editFrag);
					ft.addToBackStack("editMemo");
					ft.commit();
				}
			});
		}

	}

	// Fragment for the edit memo fragment
	public static class EditMemoFragment extends Fragment {
		public EditMemoFragment() { }

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container,
				Bundle savedInstanceState) {
			return inflater.inflate(R.layout.fragment_edit_memo, container, false);
		}

		@Override
		public void onStart() {
			super.onStart();

			
			// Get all the fields that need to be populated
			TextView titleView 	= (TextView) getActivity().findViewById(R.id.et_EditTitle);
			EditText bodyView 	= (EditText) getActivity().findViewById(R.id.et_EditBody);
			TextView latView 	= (TextView) getActivity().findViewById(R.id.tv_LatValue);
			TextView lonView 	= (TextView) getActivity().findViewById(R.id.tv_LongValue);

			// Set all the views to the appropriate text
			titleView.setText(editTitle);
			bodyView.setText(editBody);
			latView.setText(editLat);
			lonView.setText(editLon);
			
			GoogleMap map = ((MapFragment)getFragmentManager().findFragmentById(R.id.map)).getMap();
			LatLng curr = new LatLng(Double.parseDouble(editLat), Double.parseDouble(editLon));
			drawMarker(map, curr);
			map.animateCamera(CameraUpdateFactory.newLatLngZoom(curr, 17));
			
		}

	}